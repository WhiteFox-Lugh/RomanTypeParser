using RomanTypingParser;
using Xunit;
namespace RomanTypingParserTest;

public class ParseUnitTest
{
  [Theory]
  [InlineData("きゃっしゅ", new int[2] { 3, 40 })]
  [InlineData("きゅうきょ", new int[3] { 3, 3, 3 })]
  [InlineData("ぎゃんぐ", new int[2] { 3, 3 })]
  [InlineData("ぎゅうにゅう", new int[4] { 3, 3, 3, 3 })]
  [InlineData("ぎょうむれんらく", new int[6] { 3, 3, 1, 1, 3, 3 })]
  [InlineData("くぁとろふぉるまっじ", new int[7] { 8, 1, 1, 5, 1, 1, 10 })]
  [InlineData("くぃーん", new int[3] { 14, 1, 2 })]
  [InlineData("しゃしょう", new int[3] { 8, 8, 3 })]
  [InlineData("しゅれでぃんがー", new int[5] { 8, 1, 5, 3, 1 })]
  [InlineData("ぱなしぇ", new int[3] { 1, 1, 14 })]
  [InlineData("じゃんぐる", new int[3] { 7, 3, 1 })]
  [InlineData("じゅんじゅわー", new int[4] { 7, 21, 1, 1 })]
  [InlineData("じぇらーと", new int[4] { 11, 1, 1, 1 })]
  [InlineData("じょばんのだんじょん", new int[6] { 7, 1, 2, 1, 21, 2 })]
  [InlineData("ちゃんく", new int[2] { 7, 9 })]
  [InlineData("ちゅうちょ", new int[3] { 7, 3, 7 })]
  [InlineData("ちぇんじ", new int[2] { 11, 6 })]
  [InlineData("つぁーり", new int[3] { 5, 1, 1 })]
  [InlineData("てぃんぱに", new int[3] { 5, 3, 1 })]
  [InlineData("でぃーぷ", new int[3] { 5, 1, 1 })]
  [InlineData("にゃんこ", new int[2] { 3, 6 })]
  [InlineData("にゅーふぁんどらんど", new int[6] { 3, 1, 5, 3, 1, 3 })]
  [InlineData("にょうぼう", new int[4] { 3, 3, 1, 3 })]
  [InlineData("ぴゅーま", new int[3] { 3, 1, 1 })]
  [InlineData("かばぴょ", new int[3] { 2, 1, 3 })]
  [InlineData("ひゃくせんれんま", new int[5] { 3, 3, 2, 3, 3 })]
  [InlineData("ひゅーりすてぃっく", new int[6] { 3, 1, 1, 1, 5, 10 })]
  [InlineData("ひょうてんか", new int[4] { 3, 3, 1, 6 })]
  [InlineData("びゃっこ", new int[2] { 3, 10 })]
  [InlineData("ごびゅう", new int[3] { 1, 3, 3 })]
  [InlineData("びょうき", new int[3] { 3, 3, 1 })]
  [InlineData("ふぃなーれ", new int[4] { 10, 1, 1, 1 })]
  [InlineData("ふゅーじょん", new int[4] { 5, 1, 7, 2 })]
  [InlineData("ふぇんしんぐ", new int[3] { 10, 9, 3 })]
  [InlineData("ふぁっくす", new int[3] { 5, 10, 1 })]
  [InlineData("ふぉっくす", new int[3] { 5, 10, 1 })]
  [InlineData("みゃんまー", new int[3] { 3, 3, 1 })]
  [InlineData("みゅんへん", new int[3] { 3, 3, 2 })]
  [InlineData("みょうしんじ", new int[4] { 3, 3, 3, 6 })]
  [InlineData("りゃんぴん", new int[3] { 3, 3, 2 })]
  [InlineData("てんりゅうじのはっぽうにらみのりゅう", new int[14] { 1, 9, 3, 2, 1, 1, 5, 3, 1, 1, 1, 1, 3, 3 })]
  [InlineData("りょこう", new int[3] { 3, 2, 3 })]
  [InlineData("うぁっと", new int[2] { 7, 5 })]
  [InlineData("うぃんたー", new int[3] { 11, 3, 1 })]
  [InlineData("のるうぇー", new int[4] { 1, 1, 14, 1 })]
  [InlineData("うぉんばっと", new int[3] { 7, 3, 5 })]
  [InlineData("ゔぁんてーじ", new int[4] { 3, 3, 1, 2 })]
  [InlineData("ゔぃぶらふぉん", new int[5] { 6, 1, 1, 5, 2 })]
  [InlineData("ゔっ", new int[2] { 1, 4 })]
  [InlineData("ゔぇねちあ", new int[4] { 6, 1, 2, 1 })]
  [InlineData("ゔぉるてーる", new int[5] { 3, 1, 1, 1, 1 })]
  [InlineData("うゐすきー", new int[5] { 3, 1, 1, 1, 1 })]
  [InlineData("ゐひもせず", new int[5] { 1, 1, 1, 2, 1 })]
  [InlineData("あんあんというざっし", new int[7] { 1, 2, 3, 2, 3, 1, 15 })]
  [InlineData("かんいけんさ", new int[4] { 2, 4, 1, 3 })]
  [InlineData("うんうんうにうむ", new int[6] { 3, 6, 6, 1, 3, 1 })]
  [InlineData("はんえん", new int[3] { 1, 2, 2 })]
  [InlineData("けんお", new int[2] { 1, 2 })]
  [InlineData("はんかんをかう", new int[5] { 1, 6, 3, 2, 3 })]
  [InlineData("げんきんひゃくまんえん", new int[7] { 1, 3, 9, 3, 1, 2, 2 })]
  [InlineData("しんくうぱっく", new int[5] { 3, 9, 3, 1, 10 })]
  [InlineData("はんけんもの", new int[4] { 1, 3, 3, 1 })]
  [InlineData("れんこん", new int[3] { 1, 6, 2 })]
  [InlineData("さんさい", new int[3] { 1, 3, 2 })]
  [InlineData("ざんしんな", new int[3] { 1, 9, 2 })]
  [InlineData("たんす", new int[2] { 1, 3 })]
  [InlineData("かんせい", new int[3] { 2, 6, 2 })]
  [InlineData("さんそますく", new int[5] { 1, 3, 1, 1, 3 })]
  [InlineData("かんたんのため", new int[5] { 2, 3, 2, 1, 1 })]
  [InlineData("けんちんじる", new int[4] { 1, 6, 6, 1 })]
  [InlineData("めんつゆ", new int[3] { 1, 6, 1 })]
  [InlineData("はんてん", new int[3] { 1, 3, 2 })]
  [InlineData("はんと", new int[2] { 1, 3 })]
  [InlineData("けんにんじ", new int[3] { 1, 2, 6 })]
  [InlineData("かんぬ", new int[2] { 2, 2 })]
  [InlineData("いんねんのたいけつ", new int[7] { 2, 2, 2, 1, 2, 1, 2 })]
  [InlineData("はんはん", new int[3] { 1, 3, 2 })]
  [InlineData("ごせんふ", new int[3] { 1, 2, 6 })]
  [InlineData("めんぜんほんいつ", new int[5] { 1, 3, 3, 4, 2 })]
  [InlineData("じんみん", new int[3] { 2, 3, 2 })]
  [InlineData("かんむてんのう", new int[5] { 2, 3, 1, 2, 3 })]
  [InlineData("せんめんじょ", new int[3] { 2, 3, 21 })]
  [InlineData("だいかんやま", new int[5] { 1, 2, 2, 2, 1 })]
  [InlineData("いんゆ", new int[2] { 2, 2 })]
  [InlineData("かんよ", new int[2] { 2, 2 })]
  [InlineData("るんるん", new int[3] { 1, 3, 2 })]
  [InlineData("だんろ", new int[2] { 1, 3 })]
  [InlineData("しんわ", new int[2] { 3, 3 })]
  [InlineData("にほんぎんこう", new int[5] { 1, 1, 3, 6, 3 })]
  [InlineData("けんげんをにぎる", new int[6] { 1, 3, 3, 1, 1, 1 })]
  [InlineData("あたらしいげんごうは、れいわであります。", new int[19] { 1, 1, 1, 3, 2, 1, 3, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1 })]
  [InlineData("さんざんなめにあう", new int[7] { 1, 3, 2, 1, 1, 1, 3 })]
  [InlineData("しんずい", new int[3] { 3, 3, 2 })]
  [InlineData("いずくんぞ", new int[4] { 2, 1, 3, 3 })]
  [InlineData("はんだごて", new int[4] { 1, 3, 1, 1 })]
  [InlineData("ぢんぢんする", new int[4] { 1, 3, 3, 1 })]
  [InlineData("がんづぎ", new int[3] { 1, 3, 1 })]
  [InlineData("はんで", new int[2] { 1, 3 })]
  [InlineData("あんどん", new int[3] { 1, 3, 2 })]
  [InlineData("おんびん", new int[3] { 1, 3, 2 })]
  [InlineData("はんぶん", new int[3] { 1, 3, 2 })]
  [InlineData("ひゃくまんべん", new int[5] { 3, 3, 1, 3, 2 })]
  [InlineData("はんぼうき", new int[4] { 1, 3, 3, 1 })]
  [InlineData("ちんぱんじー", new int[4] { 2, 3, 6, 1 })]
  [InlineData("いもけんぴ", new int[4] { 2, 1, 1, 3 })]
  [InlineData("はんぷ", new int[2] { 1, 3 })]
  [InlineData("こんぺ", new int[2] { 2, 3 })]
  [InlineData("さんぽ", new int[2] { 1, 3 })]
  [InlineData("きゃんきゃん", new int[3] { 3, 9, 2 })]
  [InlineData("ふぁんきぃー", new int[3] { 5, 15, 1 })]
  [InlineData("けんきゅう", new int[3] { 1, 9, 3 })]
  [InlineData("せんきょうんどう", new int[5] { 2, 9, 3, 3, 3 })]
  [InlineData("ぜんこくあんぎゃ", new int[5] { 1, 6, 3, 1, 9 })]
  [InlineData("しんぎゅらりてぃー", new int[6] { 3, 9, 1, 1, 5, 1 })]
  [InlineData("かんしゃ", new int[2] { 2, 24 })]
  [InlineData("せんしゅせんせい", new int[5] { 2, 24, 2, 6, 2 })]
  [InlineData("ふぃなんしぇ", new int[3] { 10, 1, 42 })]
  [InlineData("しんしょう", new int[3] { 3, 24, 3 })]
  [InlineData("ちんじゃおろーす", new int[6] { 2, 21, 1, 1, 1, 1 })]
  [InlineData("もんじゅ", new int[2] { 1, 21 })]
  [InlineData("えんじぇる", new int[3] { 1, 33, 1 })]
  [InlineData("せんじょうち", new int[4] { 2, 21, 3, 2 })]
  [InlineData("せんちゃく", new int[3] { 2, 21, 3 })]
  [InlineData("はんちゅう", new int[3] { 1, 21, 3 })]
  [InlineData("こんちぇると", new int[4] { 2, 33, 1, 1 })]
  [InlineData("ぽんちょ", new int[2] { 1, 21 })]
  [InlineData("ぱんつぁねっら", new int[4] { 1, 15, 1, 5 })]
  [InlineData("えんてぃてぃー", new int[4] { 1, 15, 5, 1 })]
  [InlineData("いんでぃご", new int[3] { 2, 15, 1 })]
  [InlineData("ひんどぅーきょう", new int[5] { 1, 9, 1, 3, 3 })]
  [InlineData("はんにゃしんぎょう", new int[5] { 1, 6, 3, 9, 3 })]
  [InlineData("れんにゅう", new int[3] { 1, 6, 3 })]
  [InlineData("しんにょう", new int[3] { 3, 6, 3 })]
  [InlineData("ぼんぴゃく", new int[3] { 1, 9, 3 })]
  [InlineData("こんぴゅーた", new int[4] { 2, 9, 1, 1 })]
  [InlineData("かんぴょう", new int[3] { 2, 9, 3 })]
  [InlineData("とうひょうすうさんひょう", new int[9] { 1, 3, 3, 3, 1, 3, 1, 9, 3 })]
  [InlineData("かんふぁれんす", new int[4] { 2, 15, 1, 3 })]
  [InlineData("いんふぉめーしょん", new int[6] { 2, 15, 1, 1, 8, 2 })]
  [InlineData("さんみゃく", new int[3] { 1, 9, 3 })]
  [InlineData("しんみょう", new int[3] { 3, 9, 3 })]
  [InlineData("せんりゃく", new int[3] { 2, 9, 3 })]
  [InlineData("せんりゅう", new int[3] { 2, 9, 3 })]
  [InlineData("まんりょう", new int[3] { 1, 9, 3 })]
  [InlineData("さいん、こさいん、たんじぇんと", new int[10] { 1, 2, 3, 2, 1, 2, 3, 1, 33, 3 })]
  [InlineData("でんこうせっか", new int[5] { 1, 6, 3, 2, 10 })]
  [InlineData("せっきじだい", new int[5] { 2, 5, 2, 1, 2 })]
  [InlineData("ほっけふらい", new int[5] { 1, 5, 2, 1, 2 })]
  [InlineData("とびっこ", new int[3] { 1, 1, 10 })]
  [InlineData("とっさ", new int[2] { 1, 5 })]
  [InlineData("ばっすい", new int[3] { 1, 5, 2 })]
  [InlineData("まろんぐらっせ", new int[5] { 1, 1, 3, 1, 10 })]
  [InlineData("ちっそ", new int[2] { 2, 5 })]
  [InlineData("くららがたった", new int[6] { 3, 1, 1, 1, 1, 5 })]
  [InlineData("はいたっち", new int[4] { 1, 2, 1, 10 })]
  [InlineData("げっつー", new int[3] { 1, 10, 1 })]
  [InlineData("みがって", new int[3] { 1, 1, 5 })]
  [InlineData("はっととりっく", new int[5] { 1, 5, 1, 1, 10 })]
  [InlineData("いっぬ", new int[2] { 2, 4 })]
  [InlineData("ばっは", new int[2] { 1, 5 })]
  [InlineData("りーびっひれいきゃくき", new int[9] { 1, 1, 1, 5, 1, 2, 3, 3, 1 })]
  [InlineData("すたっふ", new int[3] { 1, 1, 10 })]
  [InlineData("えっへん", new int[3] { 1, 5, 2 })]
  [InlineData("ごっほ", new int[2] { 1, 5 })]
  [InlineData("れっぐ", new int[2] { 1, 5 })]
  [InlineData("どっご", new int[2] { 1, 5 })]
  [InlineData("えっじ", new int[2] { 1, 10 })]
  [InlineData("おっず", new int[2] { 1, 5 })]
  [InlineData("ぶっだ", new int[2] { 1, 5 })]
  [InlineData("はりうっど", new int[4] { 1, 1, 3, 5 })]
  [InlineData("せっぱつまる", new int[5] { 2, 5, 2, 1, 1 })]
  [InlineData("はっぴー", new int[3] { 1, 5, 1 })]
  [InlineData("にいかっぷ", new int[4] { 1, 2, 2, 5 })]
  [InlineData("ふらっぺ", new int[3] { 2, 1, 5 })]
  [InlineData("かっぽ", new int[2] { 2, 5 })]
  [InlineData("しっきゃく", new int[3] { 3, 19, 3 })]
  [InlineData("くっきぃー", new int[3] { 3, 25, 1 })]
  [InlineData("さっきゅう", new int[3] { 1, 15, 3 })]
  [InlineData("らっきょう", new int[3] { 1, 15, 3 })]
  [InlineData("せっしゃ", new int[2] { 2, 40 })]
  [InlineData("よっしぃ", new int[2] { 1, 65 })]
  [InlineData("せっしゅ", new int[2] { 2, 40 })]
  [InlineData("くれっしぇんど", new int[4] { 3, 1, 70, 3 })]
  [InlineData("がっしょう", new int[3] { 1, 40, 3 })]
  [InlineData("まっちゃ", new int[2] { 1, 35 })]
  [InlineData("はっちゅうみす", new int[5] { 1, 35, 3, 1, 1 })]
  [InlineData("あっちぇれらんど", new int[5] { 1, 55, 1, 1, 3 })]
  [InlineData("はっちょうみそ", new int[5] { 1, 35, 3, 1, 1 })]
  [InlineData("すぷりっつぁー", new int[5] { 1, 1, 1, 25, 1 })]
  [InlineData("まりとっつぉ", new int[4] { 1, 1, 1, 25 })]
  [InlineData("すぱげってぃ", new int[4] { 1, 1, 1, 25 })]
  [InlineData("うっでぃー", new int[3] { 3, 25, 1 })]
  [InlineData("はっぴゃく", new int[3] { 1, 15, 3 })]
  [InlineData("すろっぴぃ", new int[3] { 1, 1, 25 })]
  [InlineData("はっぴょう", new int[3] { 1, 15, 3 })]
  [InlineData("みっふぃー", new int[3] { 1, 50, 1 })]
  [InlineData("びゅっふぇ", new int[2] { 3, 50 })]
  [InlineData("えとぴりか", new int[5] { 1, 1, 1, 1, 2 })]
  [InlineData("おのづから", new int[5] { 1, 1, 1, 2, 1 })]
  [InlineData("ぺぺろんちーの", new int[6] { 1, 1, 1, 6, 1, 1 })]
  [InlineData("やよいじだい", new int[6] { 1, 1, 2, 2, 1, 2 })]
  [InlineData("てぬぐい", new int[4] { 1, 1, 1, 2 })]
  [InlineData("べるぬーい", new int[5] { 1, 1, 1, 1, 2 })]
  [InlineData("ぞろぞろ", new int[4] { 1, 1, 1, 1 })]
  [InlineData("the quick brown fox jumps over the lazy dog.", new int[44] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 })]
  [InlineData("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.", new int[44] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 })]
  [InlineData("3.1415926535897", new int[15] { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 })]
  public void Test(string input, int[] patternNumList)
  {
    // Json ファイル読み込み
    RomanTypingParserJp.ReadJsonFile();

    // パース
    var result = RomanTypingParserJp.ConstructTypeSentence(input);

    // 区切りが一致することの確認
    Assert.Equal(patternNumList.Length, result.parsedSentence.Count);

    // 区切りごとに入力パターン数が一致することの確認
    for (int i = 0; i < patternNumList.Length; ++i)
    {
      Assert.Equal(patternNumList[i], result.judgeAutomaton[i].Count);
    }
  }
}